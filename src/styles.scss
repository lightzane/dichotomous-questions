// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use "~@angular/material" as mat;
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$mat-primary: mat.define-palette(mat.$teal-palette);
$mat-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

// Primary Color for Dark Theme
// $mat-primary-dark: mat.define-palette(mat.$teal-palette);

// The warn palette is optional (defaults to red).
$mat-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$mat-theme: mat.define-light-theme(
  (
    color: (
      primary: $mat-primary,
      accent: $mat-accent,
      warn: $mat-warn,
    ),
  )
);

// For Dark Theme
// $mat-theme-dark: mat.define-dark-theme(
//     (
//         color: (
//             primary: $mat-primary-dark,
//             accent: $mat-accent,
//             warn: $mat-warn,
//         ),
//     )
// );

:root {
  --mat-primary: #{mat.get-color-from-palette($mat-primary)};
  --mat-accent: #{mat.get-color-from-palette($mat-accent, A200)};
  --mat-accent-contrast: #{mat.get-color-from-palette($mat-accent, A200-contrast)};
  --mat-warn: #{mat.get-color-from-palette($mat-warn)};

  // .dark-theme {
  //     // to prevent The same density styles are generated multiple times
  //     // use "all-components-colors" instead
  //     // This mixin only generates the color styles now.
  //     @include mat.all-component-colors($mat-theme-dark);

  //     --mat-primary: #{mat.get-color-from-palette($mat-primary-dark)};
  // }
}

// ===============================================================================================

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($mat-theme);

/* You can add global styles to this file, and also import other style files */

// Bootstrap
// TODO npm i bootstrap@5
// ! Important not to name @angular/material variables with the same variable name that bootstrap uses
// Option B: Include parts of Bootstrap

// 1. Include functions first (so you can manipulate colors, SVGs, calc, etc)
@import "~bootstrap/scss/functions";

// 2. Include any default variable overrides here

// 3. Include remainder of required Bootstrap stylesheets
@import "~bootstrap/scss/variables";
@import "~bootstrap/scss/mixins";
////@import "~bootstrap/scss/root"; // generate :root color palettes and fonts

// 4. Include any optional Bootstrap CSS as needed
@import "~bootstrap/scss/reboot";
@import "~bootstrap/scss/utilities"; // utility classes for showing, hiding, aligning, and spacing content
@import "~bootstrap/scss/containers";
@import "~bootstrap/scss/grid"; // column and rows (e.g. .col-md-4)

// 5. Include utilities API last to generate classes based on the Sass map in `_utilities.scss`
@import "../node_modules/bootstrap/scss/utilities/api";

// Generated by "ng add @angular/material"
html,
body {
  height: 100%;
}
body {
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
  // background-image: url("https://cdn.jsdelivr.net/gh/lightzane/basic-kanban@master/src/assets/scattered-forcefields.svg");
  background-image: url("https://upload.wikimedia.org/wikipedia/commons/e/e2/Lake_Tekapo_01.jpg");
  background-attachment: fixed;
  background-size: cover;
}

// To prevent zoom in on mobile devices when user inputs
@media screen and (max-width: 767px) {
  // Make sure to also apply this on any "contentEditable=true"
  input,
  select,
  textarea {
    font-size: 16px !important;
  }
}

// My Resets
p {
  white-space: pre-wrap; // in HTML, display "new lines (\n)" from textarea input
}

.spacer {
  flex: 1;
}

@media screen and (max-width: 400px) {
  p {
    font-size: 16px !important;
  }
}
